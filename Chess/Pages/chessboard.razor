@page "/chessboard"
<div class="chessboard">
    @for (int row = 0; row < 8; row++)
    {
        <div class="chessboard-row">
            @for (int col = 0; col < 8; col++)
            {
                var localRow = row;
                var localCol = col;
                <div class="@GetClasses(localRow, localCol)"  @onclick="(() => HandleClick(localRow, localCol))">
                </div>
            }
        </div>
    }
</div>
@code { 
    private string[,] chessPieces = new string[8, 8];
    private bool isPieceSelected = false;
    private (int row, int col) selectedPiece = (-1, -1); // Updated to track selected piece

    // Example FEN for starting position
    private string fenString = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

    protected override void OnInitialized()
    {
        InitializeBoardFromFEN(fenString);
    }

    private void InitializeBoardFromFEN(string fen)
    {
        // Reset the board
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                chessPieces[i, j] = null;
            }
        }

        // Parse the FEN string
        var ranks = fen.Split(' ')[0].Split('/');
        for (int rank = 0; rank < ranks.Length; rank++)
        {
            var file = 0;
            foreach (var symbol in ranks[rank])
            {
                if (char.IsDigit(symbol))
                {
                    file += int.Parse(symbol.ToString());
                }
                else
                {
                    var piece = PieceFromFEN(symbol);
                    if (piece != null)
                    {
                        chessPieces[7 - rank, file] = piece;
                        file++;
                    }
                }
            }
        }
    }

    private string PieceFromFEN(char fenChar)
    {
        switch (fenChar)
        {
            case 'p': return "black-pawn";
            case 'r': return "black-rook";
            case 'n': return "black-knight";
            case 'b': return "black-bishop";
            case 'q': return "black-queen";
            case 'k': return "black-king";
            case 'P': return "white-pawn";
            case 'R': return "white-rook";
            case 'N': return "white-knight";
            case 'B': return "white-bishop";
            case 'Q': return "white-queen";
            case 'K': return "white-king";
            default: return null; // Invalid piece
        }
    
       }
       




private void HandleClick(int row, int col)
{
    Console.WriteLine("Clicked");
    Console.WriteLine("row and int:" + row +","+ col);
    // Check if the clicked cell has a piece
    bool cellHasPiece = chessPieces[row, col] != null;

    if (!isPieceSelected && cellHasPiece)
    {
        Console.WriteLine("Selecting piece");
        // Select the piece if no piece was previously selected and the cell isn't empty
        isPieceSelected = true;
        selectedPiece = (row, col);
    }
    else if (isPieceSelected)
    {
        if ((selectedPiece.row == row && selectedPiece.col == col) || !cellHasPiece)
        {
            Console.WriteLine("Deselecting or moving piece");
            // Deselect the piece if the same piece is clicked again or attempt to move if the destination is empty
            if (selectedPiece.row == row && selectedPiece.col == col)
            {
                // Deselect the piece
                isPieceSelected = false;
                selectedPiece = (-1, -1);
            }
            else if (!cellHasPiece)
            {
                // Attempt to move the piece if another empty cell is clicked while a piece is selected
                MovePiece(selectedPiece.row, selectedPiece.col, row, col);
                isPieceSelected = false;
                selectedPiece = (-1, -1); // Deselect after moving
            }
        }
        else if (cellHasPiece)
        {
            Console.WriteLine("Attempting to capture or switch selection");
            
            selectedPiece = (row, col); // Switch the selected piece without moving
            
        }
    }
   
    
}


    private void MovePiece(int fromRow, int fromCol, int toRow, int toCol)
    {
       
        chessPieces[toRow, toCol] = chessPieces[fromRow, fromCol];
        chessPieces[fromRow, fromCol] = null;

        // Trigger UI refresh
        StateHasChanged();
    }
    private string GetCellColor(int row, int col)
    {
      
        return (row + col) % 2 == 0 ? "light-cell" : "dark-cell";
    }

    private string GetPiece(int row, int col)
    {
        
        return chessPieces[row, col];
    }

    private string GetClasses(int row, int col)
    {
        var classes = $"chessboard-cell {GetCellColor(row, col)}";
        if (!string.IsNullOrEmpty(chessPieces[row, col]))
        {
            classes += $" {chessPieces[row, col]} chess-piece";
        }
        if (isPieceSelected && selectedPiece.row == row && selectedPiece.col == col)
        {
            classes += " selected"; // Add the 'selected' class if the cell is selected
        }
        return classes;
    }
}
