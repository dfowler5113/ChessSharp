@page "/Chessboard2"
@using Chesslogic
<style>
.chess-board {
    background-image: url('Assets/Board.png');
    background-size: contain;
    background-repeat: no-repeat;
    width: 50%; 
    margin-left: auto;
    margin-right: auto;
    display: block; 
    position: relative;
    padding-top: 50%; 
}
.darkened-square {
    background-color: rgba(0, 0, 0, 0.5); 
}
.chess-row {
    width: 100%;
    position: absolute; 
}

.chess-square {
    width: 12.5%; 
    height: 99%; 
    float: left; 
    position: relative; 
}

.chess-piece {
    width: 100%; 
    height: auto; 
    display: block; 
}

.highlighted-square {
    outline: 2px solid yellow; 
    outline-offset: -2px;
}

</style>
<div class="chess-board" style="background-image: url('Assets/Board.png');">
    @for (int row = 0; row < 8; row++)
{
    int localRow = row; 
    <div class="chess-row" style="top: @(localRow * 12.5)%; height: 12.5%;">
        @for (int col = 0; col < 8; col++)
        {
            int localCol = col; 
            <div class="chess-square @(GetSquareClass(localRow, localCol))"
                 @onclick="() => HandleClick(new Position(localRow, localCol))">
                 @if (board[localRow, localCol] != null)
                 {
                     <img class="chess-piece" src="@GetPieceImage(localRow, localCol)" alt="Chess Piece">
                 }
            </div>
        }
    </div>
}
</div>




@code {
     private Game gameState;
    private Board board;
   

    
    protected override void OnInitialized()
    {
        gameState = new Game(Player.White, Board.Initialize());
        board = gameState.Board; 
    }


private Position selectedPosition;
private bool isPositionSelected = false; 
private void HandleClick(Position pos)
{
    if (!isPositionSelected)
    {
        if (!board.isEmpty(pos) && board[pos].Color == gameState.Current)
        {
            selectedPosition = pos;
            isPositionSelected = true; 
            Console.WriteLine($"Piece selected at {pos.Row}, {pos.Column}");
        }
    }
    else
    {
        if (selectedPosition.Equals(pos))
        {
            isPositionSelected = false; 
            Console.WriteLine("Deselecting piece.");
        }
        else
        {
            var moves = gameState.LegalMoves(selectedPosition).ToList();
            var move = moves.FirstOrDefault(m => m.ToPosition.Equals(pos));
            if (move != null)
            {
                Console.WriteLine($"Executing move to {pos.Row}, {pos.Column}");
                gameState.MakeMove(move);
                isPositionSelected = false;  
            }
            else
            {
                Console.WriteLine("Move invalid or not found.");
                
            }
        }
    }
    StateHasChanged();  
}

    private string GetSquareClass(int row, int col)
{
    if (isPositionSelected && selectedPosition.Row == row && selectedPosition.Column == col)
    {
        return "highlighted darkened-square"; 
    }
    return "";
}





    private string GetPieceImage(int row, int col)
{
    var piece = board[row, col];
    if (piece == null)
    {
        return string.Empty; 
    }

    
    var imagePath = Images.GetImage(piece); 
    return imagePath;
}
}


